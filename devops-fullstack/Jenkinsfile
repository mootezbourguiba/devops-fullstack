pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'apache-maven-3.8.6'
        nodejs 'node-20'
    }

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials'
        DOCKERHUB_USERNAME       = "mootezbourguiba365"
        IMAGE_FRONTEND           = "${DOCKERHUB_USERNAME}/devops-frontend:latest"
        IMAGE_BACKEND            = "${DOCKERHUB_USERNAME}/devops-backend:latest"
        SSH_CREDENTIALS_ID       = 'ssh-credentials-mon-serveur'
        REMOTE_DEPLOY_PATH       = '/home/user/devops-app' // √Ä adapter
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code depuis GitHub...'
                checkout scm
                sh 'ls -la'
            }
        }

        stage('Build et Test Backend') {
            steps {
                echo '‚öôÔ∏è Compilation du backend...'
                dir('devops-fullstack/backend/backendDevops') {
                    sh 'mvn clean package'
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'devops-fullstack/backend/backendDevops/target/*.jar', fingerprint: true
                }
            }
        }

        stage('Build Frontend') {
            steps {
                echo 'üåê Construction du frontend React...'
                dir('devops-fullstack/frontend/frontenddevops') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'devops-fullstack/frontend/frontenddevops/build/**', fingerprint: true
                }
            }
        }

        stage('Build et Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID,
                                                 usernameVariable: 'DOCKERHUB_USER',
                                                 passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh "docker login -u '${DOCKERHUB_USER}' -p '${DOCKERHUB_PASSWORD}'"

                    dir('devops-fullstack/backend/backendDevops') {
                        sh "docker build -t ${IMAGE_BACKEND} ."
                    }
                    sh "docker push ${IMAGE_BACKEND}"

                    dir('devops-fullstack/frontend/frontenddevops') {
                        sh "docker build -t ${IMAGE_FRONTEND} ."
                    }
                    sh "docker push ${IMAGE_FRONTEND}"

                    sh 'docker logout'
                }
            }
        }

        stage('Deploy to Remote Server via SSH') {
            steps {
                sshagent(credentials: [env.SSH_CREDENTIALS_ID]) {
                    sh "scp -o StrictHostKeyChecking=no docker-compose.yml user@your_server_ip:${REMOTE_DEPLOY_PATH}/docker-compose.yml"
                    sh "ssh -o StrictHostKeyChecking=no user@your_server_ip 'cd ${REMOTE_DEPLOY_PATH} && docker-compose pull && docker-compose up -d'"
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage du workspace...'
            cleanWs()
        }
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s !'
        }
        failure {
            echo '‚ùå √âchec du pipeline !'
        }
    }
}
