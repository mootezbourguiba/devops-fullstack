pipeline {
    agent none

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials'
        DOCKERHUB_USERNAME       = "mootezbourguiba365"
        IMAGE_FRONTEND           = "${DOCKERHUB_USERNAME}/devops-frontend:latest"
        IMAGE_BACKEND            = "${DOCKERHUB_USERNAME}/devops-backend:latest"
        SSH_CREDENTIALS_ID       = 'ssh-credentials-mon-serveur'
        REMOTE_DEPLOY_PATH       = '/home/user/devops-app'
    }

    stages {
        stage('Checkout SCM') {
            agent any
            steps {
                echo 'üöö R√©cup√©ration du code source...'
                checkout scm
            }
        }

        stage('Build Backend') {
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-17'
                    args '-v $HOME/.m2:/root/.m2 --network host'
                }
            }
            steps {
                dir('devops-fullstack/backend/backendDevops') {
                    sh ''' # Correction cl√© ici avec guillemets simples
                        set -exo pipefail
                        echo "üîç Verification structure projet :"
                        echo "R√©pertoire courant : $(pwd)"
                        ls -la
                        [ -f pom.xml ] || { echo "‚ùå Fichier pom.xml manquant"; exit 1; }
                        mvn clean package -DskipTests
                    '''
                }
            }
        }

        stage('Build Frontend') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '-u root --network host'
                }
            }
            steps {
                dir('frontend') {
                    sh ''' # Guillemets simples ici aussi
                        set -exo pipefail
                        echo "üì¶ Installation des d√©pendances..."
                        npm ci --silent
                        echo "üèóÔ∏è Construction du build de production..."
                        npm run build
                    '''
                }
            }
        }

        stage('Docker Build & Push') {
            agent any
            steps {
                withCredentials([usernamePassword(
                    credentialsId: env.DOCKERHUB_CREDENTIALS_ID,
                    passwordVariable: 'DOCKERHUB_PASSWORD',
                    usernameVariable: 'DOCKERHUB_USERNAME'
                )]) {
                    script {
                        sh "docker login -u ${env.DOCKERHUB_USERNAME} -p ${env.DOCKERHUB_PASSWORD}"
                        
                        dir('devops-fullstack/backend/backendDevops') {
                            sh """
                                docker build -t ${env.IMAGE_BACKEND} . 
                                docker push ${env.IMAGE_BACKEND}
                            """
                        }

                        dir('frontend') {
                            sh """
                                docker build -t ${env.IMAGE_FRONTEND} .
                                docker push ${env.IMAGE_FRONTEND}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            agent any
            steps {
                sshagent([env.SSH_CREDENTIALS_ID]) {
                    sh """
                        scp -o StrictHostKeyChecking=no docker-compose.yml user@server:${env.REMOTE_DEPLOY_PATH}/
                        ssh -o StrictHostKeyChecking=no user@server "
                            cd ${env.REMOTE_DEPLOY_PATH}
                            docker compose down
                            docker compose pull
                            docker compose up -d
                        "
                    """
                }
            }
        }
    }

    post {
        always {
            echo "üßº Nettoyage de l'espace de travail..."
            cleanWs()

            script {
                // Bonus : Debug des temps d'ex√©cution
                echo "‚è±Ô∏è D√©tails de performance :"
                echo "- Dur√©e totale : ${currentBuild.durationString}"

                def stages = currentBuild.rawBuild.getStages()
                stages.each { stage ->
                    echo "- ${stage.name} : ${stage.durationString}"
                }
            }
        }
        success {
            echo "‚úÖ Tout est op√©rationnel !"
            slackSend color: 'good', 
                     message: "SUCC√àS : Build #${env.BUILD_NUMBER} (${env.JOB_NAME})"
        }
        failure {
            echo "‚ùå Une erreur critique est survenue"
            slackSend color: 'danger',
                     message: "√âCHEC : Build #${env.BUILD_NUMBER} (${env.JOB_NAME})"
        }
    }
}
