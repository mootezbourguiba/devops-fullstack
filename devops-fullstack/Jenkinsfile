pipeline {
    agent none

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials'
        DOCKERHUB_USERNAME       = "mootezbourguiba365"
        IMAGE_FRONTEND           = "${DOCKERHUB_USERNAME}/devops-frontend:latest"
        IMAGE_BACKEND            = "${DOCKERHUB_USERNAME}/devops-backend:latest"
        SSH_CREDENTIALS_ID       = 'ssh-credentials-mon-serveur'
        REMOTE_DEPLOY_PATH       = '/home/user/devops-app'
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                echo 'üì• R√©cup√©ration du code depuis GitHub...'
                checkout scm
            }
        }

        stage('Build et Test Backend') {
            agent {
                docker {
                    image 'maven:3.8.6-openjdk-17'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                dir('devops-fullstack/backend/backendDevops') {
                    sh '''  # Guillemets simples pour √©viter les conflits
                        set -ex
                        echo "üìÇ Chemin actuel : $(pwd)"  # Maintenant s√©curis√©
                        ls -la
                        [ -f pom.xml ] || { echo "üö® ERREUR: pom.xml manquant"; exit 1; }
                        mvn clean package
                    '''
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'devops-fullstack/backend/backendDevops/target/*.jar', fingerprint: true
                }
            }
        }

        stage('Build Frontend') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '-u root'
                }
            }
            steps {
                dir('frontend') {
                    sh '''
                        set -ex
                        npm install --silent
                        npm run build
                    '''
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'frontend/build/**', fingerprint: true
                }
            }
        }

        stage('Build et Push Docker Images') {
            agent any
            steps {
                withCredentials([usernamePassword(
                    credentialsId: env.DOCKERHUB_CREDENTIALS_ID,
                    passwordVariable: 'DOCKERHUB_PASSWORD',
                    usernameVariable: 'DOCKERHUB_USER'
                )]) {
                    script {
                        sh """
                            docker login -u ${env.DOCKERHUB_USERNAME} -p ${env.DOCKERHUB_PASSWORD}
                        """
                        
                        dir('devops-fullstack/backend/backendDevops') {
                            sh """
                                docker build -t ${env.IMAGE_BACKEND} .
                                docker push ${env.IMAGE_BACKEND}
                            """
                        }

                        dir('frontend') {
                            sh """
                                docker build -t ${env.IMAGE_FRONTEND} .
                                docker push ${env.IMAGE_FRONTEND}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Remote Server via SSH') {
            agent any
            steps {
                sshagent(credentials: [env.SSH_CREDENTIALS_ID]) {
                    sh """
                        scp -o StrictHostKeyChecking=no docker-compose.yml user@server:${env.REMOTE_DEPLOY_PATH}/
                        ssh -o StrictHostKeyChecking=no user@server "
                            cd ${env.REMOTE_DEPLOY_PATH} 
                            docker-compose pull
                            docker-compose up -d
                        "
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            echo 'üßπ Nettoyage termin√©'
        }
        success {
            echo '‚úÖ Pipeline r√©ussi !'
            slackSend color: 'good', message: "Build ${currentBuild.number} r√©ussi"
        }
        failure {
            echo '‚ùå √âchec du pipeline'
            slackSend color: 'danger', message: "Build ${currentBuild.number} a √©chou√©"
        }
    }
}
